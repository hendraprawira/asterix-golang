// func StartUDP(address string, portSend string) {
// 	// Resolve the UDP address
// 	udpAddr, err := net.ResolveUDPAddr("udp", address)
// 	if err != nil {
// 		fmt.Println("Error resolving address:", err)
// 		return
// 	}

// 	// Create a UDP connection
// 	conn, err := net.ListenUDP("udp", udpAddr)
// 	if err != nil {
// 		fmt.Println("Error creating UDP connection:", err)
// 		return
// 	}
// 	defer conn.Close()

// 	fmt.Println("Listening for UDP packets on", address)

// 	// Create a buffer to store incoming packet data
// 	buffer := make([]byte, 20000)
// 	conn.SetReadDeadline(time.Now().Add(1000 * time.Millisecond))
// 	// Receive UDP packets in a loop

// 	for {
// 		start := time.Now().UTC()
// 		// Read from the UDP connection into the buffer
// 		n, _, err := conn.ReadFromUDP(buffer)
// 		if err != nil {
// 			fmt.Println("Error reading UDP packet:", err)
// 			continue
// 		}
// 		// Process the received packet
// 		packet := buffer[:n]
// 		// log.Print(packet)
// 		hexString := hex.EncodeToString(packet)
// 		ab := hex.EncodeToString(packet[8:12])
// 		value5, _ := strconv.ParseInt(ab, 16, 64)
// 		log.Print(value5)

// 		var result []string
// 		for i := 0; i < len(hexString); i += 2 {
// 			if i+2 <= len(hexString) {
// 				result = append(result, hexString[i:i+2])
// 			} else {
// 				result = append(result, hexString[i:])
// 			}
// 		}
// 		if result[0] == "f0" {
// 			dataStruct := AsterixParse(result)
// 			jsonData, _ := json.Marshal(dataStruct)
// 			SendDataUdp(portSend, jsonData)
// 			// Print the JSON data
// 			fmt.Println(string(jsonData))
// 			processing := time.Since(start)
// 			fmt.Fprintf(os.Stdout, "\033[0;31m Time taken: %s\033[0m\n ", processing)
// 		}

// 	}
// }

// func StartUDP(address string, portSend string) {
// 	conn, err := net.ListenPacket("udp", address)
// 	if err != nil {
// 		fmt.Println("Error listening:", err)
// 		return
// 	}
// 	defer conn.Close()
// 	for {
// 		start := time.Now().UTC()
// 		buffer := make([]byte, 6408)
// 		conn.SetReadDeadline(time.Now().Add(1000 * time.Millisecond))
// 		n, _, err := conn.ReadFrom(buffer)
// 		if err != nil {
// 			fmt.Println("Error reading from connection:", err)
// 			return
// 		}

// 		packet := buffer[:n]
// 		hexString := hex.EncodeToString(packet)
// 		ab := hex.EncodeToString(packet[8:12])
// 		value5, _ := strconv.ParseInt(ab, 16, 64)
// 		log.Print(value5)
// 		// processing := time.Since(start)
// 		// fmt.Fprintf(os.Stdout, "\033[0;31m Time taken: %s\033[0m\n ", processing)
// 		var result []string

// 		for i := 0; i < len(hexString); i += 2 {
// 			if i+2 <= len(hexString) {
// 				result = append(result, hexString[i:i+2])
// 			} else {
// 				result = append(result, hexString[i:])
// 			}
// 		}
// 		if result[0] == "f0" {
// 			dataStruct := AsterixParse(result)
// 			jsonData, _ := json.Marshal(dataStruct)
// 			SendDataUdp(portSend, jsonData)
// 			// Print the JSON data
// 			fmt.Println(string(jsonData))
// 			processing := time.Since(start)
// 			fmt.Fprintf(os.Stdout, "\033[0;31m Time taken: %s\033[0m\n ", processing)
// 		}

// 	}

// }



package utils

import (
	"fmt"
	"net"

	"golang.org/x/net/ipv4"
)

// func StartUDP(packetConn *ipv4.PacketConn, buffer []byte) {
// 	for {
// 		// Read from the connection
// 		// start := time.Now().UTC()

// 		n, _, _, err := packetConn.ReadFrom(buffer)
// 		if err != nil {
// 			fmt.Println("Error reading:", err)
// 			continue
// 		}

// 		// Process the received data
// 		data := buffer[:n]
// 		hexString := hex.EncodeToString(data)
// 		var result []string

// 		for i := 0; i < len(hexString); i += 2 {
// 			if i+2 <= len(hexString) {
// 				result = append(result, hexString[i:i+2])
// 			} else {
// 				result = append(result, hexString[i:])
// 			}
// 		}
// 		if result[0] == "f0" && len(result) > 510 {
// 			dataStruct := AsterixParse(result)
// 			// jsonData, _ := json.Marshal(dataStruct)
// 			// SendDataUdp("172.16.6.168:8003", jsonData)
// 			// Print the JSON data
// 			fmt.Println(dataStruct)
// 			// fmt.Println(string(jsonData))
// 			// processing := time.Since(start)
// 			// fmt.Fprintf(os.Stdout, "\033[0;31m Time taken: %s\033[0m\n ", processing
// 		}

// 	}

// }

func ConnectionUDP(port string) (packetConn *ipv4.PacketConn, buffer []byte) {
	addr, err := net.ResolveUDPAddr("udp", ":"+"8080")
	if err != nil {
		fmt.Println("Error resolving address:", err)
		return
	}

	// Create a UDP connection
	conn, err := net.ListenUDP("udp", addr)
	if err != nil {
		fmt.Println("Error listening:", err)
		return
	}
	fmt.Println("UDP Listening Now...!:")
	defer conn.Close()
	packetConn = ipv4.NewPacketConn(conn)
	buffer = make([]byte, 6048)
	return packetConn, buffer
}

func ReadUDP(packetConn *ipv4.PacketConn, buffer []byte) {
	for {
		n, _, _, err := packetConn.ReadFrom(buffer)
		if err != nil {
			fmt.Println("Error reading:", err)
			continue
		}
		data := buffer[:n]
		if int(data[0:1][0]) == 240 && n > 500 {
			dataStruct := AsterixParse(data)
			// jsonData, _ := json.Marshal(dataStruct)
			fmt.Println(dataStruct)
			// SendDataUdp("172.16.21.205:8888", jsonData)

		}

	}

}

// func StartUDP(packetConn *ipv4.PacketConn, buffer []byte) {
// 	for {
// 		n, _, _, err := packetConn.ReadFrom(buffer)
// 		if err != nil {
// 			fmt.Println("Error reading:", err)
// 			continue
// 		}
// 		data := buffer[:n]
// 		if int(data[0:1][0]) == 240 && len(data) > 510 {
// 			dataStruct := binary.BigEndian.Uint32(data[8:12])
// 			fmt.Println(dataStruct)
// 		}

// 	}

// }

func SendDataUdp(destinationPort string, data []byte) {
	destAddr, err := net.ResolveUDPAddr("udp", destinationPort)
	if err != nil {
		fmt.Println("Error resolving destination address:", err)
		return
	}

	// Create UDP connection to send data
	sendConn, err := net.DialUDP("udp", nil, destAddr)
	if err != nil {
		fmt.Println("Error creating UDP connection for sending:", err)
		return
	}
	defer sendConn.Close()

	// Forward the data to the destination
	_, err = sendConn.Write(data)
	if err != nil {
		fmt.Println("Error forwarding data:", err)
		return
	}
}



// func AsterixParse(data []string) models.Cat240 {
// 	lastIndex := len(data) - 1
// 	lastIndexV := lastIndex - 2
// 	a := data[0:1]
// 	value1, _ := strconv.ParseInt(strings.Join(a, " "), 16, 64)

// 	b := data[1:3]
// 	value2, _ := strconv.ParseInt(strings.ReplaceAll(strings.Join(b, " "), " ", ""), 16, 64)

// 	c := data[5:6]
// 	value3, _ := strconv.ParseInt(strings.Join(c, " "), 16, 64)

// 	d := data[6:7]
// 	value4, _ := strconv.ParseInt(strings.Join(d, " "), 16, 64)

// 	e := data[7:8]
// 	value5, _ := strconv.ParseInt(strings.Join(e, " "), 16, 64)

// 	f := data[8:12]
// 	value6, _ := strconv.ParseInt(strings.ReplaceAll(strings.Join(f, " "), " ", ""), 16, 64)

// 	g := data[12:14]
// 	value7, _ := strconv.ParseInt(strings.ReplaceAll(strings.Join(g, " "), " ", ""), 16, 64)
// 	value7a := (float64(value7) / math.Pow(2, 16)) * float64(360)

// 	h := data[14:16]
// 	value8, _ := strconv.ParseInt(strings.ReplaceAll(strings.Join(h, " "), " ", ""), 16, 64)
// 	value8a := (float64(value8) / math.Pow(2, 16)) * float64(360)

// 	i := data[16:20]
// 	value9, _ := strconv.ParseInt(strings.ReplaceAll(strings.Join(i, " "), " ", ""), 16, 64)

// 	j := data[20:24]
// 	value10, _ := strconv.ParseInt(strings.ReplaceAll(strings.Join(j, " "), " ", ""), 16, 64)

// 	k := data[25:26]
// 	value11, _ := strconv.ParseInt(strings.Join(k, " "), 16, 64)

// 	calc := value11 - 1
// 	calca := math.Pow(2, float64(calc))

// 	l := data[26:28]
// 	value12, _ := strconv.ParseInt(strings.ReplaceAll(strings.Join(l, " "), " ", ""), 16, 64)

// 	m := data[28:31]
// 	value13, _ := strconv.ParseInt(strings.ReplaceAll(strings.Join(m, " "), " ", ""), 16, 64)

// 	value13a := ((value13 * int64(calca)) / value11) / 2

// 	n := data[32 : value13a+32]
// 	value14 := strings.ToUpper((strings.ReplaceAll(strings.Join(n, " "), " ", "")))

// 	o := data[lastIndexV : lastIndex+1]
// 	value15, _ := strconv.ParseInt(strings.ReplaceAll(strings.Join(o, " "), " ", ""), 16, 64)
// 	tod := (float64(value15) / 128)

// 	dataStruct := models.Cat240{}

// 	if value2 <= 1020 {
// 		dataStruct = models.Cat240{
// 			Category: value1,
// 			Length:   value2,
// 			Time:     time.Now().Unix(),
// 			I010: models.I010{
// 				SAC: value3,
// 				SIC: value4,
// 			},
// 			I000: models.I000{
// 				TYP: value5,
// 			},
// 			I020: models.I020{
// 				MsgIndex: value6,
// 			},
// 			I041: models.I041{
// 				StartAz: float64(value7a),
// 				EndAz:   float64(value8a),
// 				StartRg: value9,
// 				CellDur: value10,
// 			},
// 			I048: models.I048{
// 				Res: value11,
// 			},
// 			I049: models.I049{
// 				Nbvb:    value12,
// 				NbCells: value13,
// 			},
// 			I050: &models.I050{
// 				Video: value14,
// 			},
// 			I040: models.I040{
// 				ToD: tod,
// 			},
// 		}
// 	} else if value2 > 1020 && value2 <= 16320 {
// 		dataStruct = models.Cat240{
// 			Category: value1,
// 			Length:   value2,
// 			Time:     time.Now().Unix(),
// 			I010: models.I010{
// 				SAC: value3,
// 				SIC: value4,
// 			},
// 			I000: models.I000{
// 				TYP: value5,
// 			},
// 			I020: models.I020{
// 				MsgIndex: value6,
// 			},
// 			I041: models.I041{
// 				StartAz: float64(value7a),
// 				EndAz:   float64(value8a),
// 				StartRg: value9,
// 				CellDur: value10,
// 			},
// 			I048: models.I048{
// 				Res: value11,
// 			},
// 			I049: models.I049{
// 				Nbvb:    value12,
// 				NbCells: value13,
// 			},
// 			I051: &models.I051{
// 				Video: value14,
// 			},
// 			I040: models.I040{
// 				ToD: tod,
// 			},
// 		}
// 	} else if value2 > 16320 && value2 <= 65024 {
// 		dataStruct = models.Cat240{
// 			Category: value1,
// 			Length:   value2,
// 			Time:     time.Now().Unix(),
// 			I010: models.I010{
// 				SAC: value3,
// 				SIC: value4,
// 			},
// 			I000: models.I000{
// 				TYP: value5,
// 			},
// 			I020: models.I020{
// 				MsgIndex: value6,
// 			},
// 			I041: models.I041{
// 				StartAz: float64(value7a),
// 				EndAz:   float64(value8a),
// 				StartRg: value9,
// 				CellDur: value10,
// 			},
// 			I048: models.I048{
// 				Res: value11,
// 			},
// 			I049: models.I049{
// 				Nbvb:    value12,
// 				NbCells: value13,
// 			},
// 			I052: &models.I052{
// 				Video: value14,
// 			},
// 			I040: models.I040{
// 				ToD: tod,
// 			},
// 		}
// 	}
// 	return dataStruct
// }

// package models

// type Cat240 struct {
// 	Category int64 `json:"Category"`
// 	Length   int64 `json:"Length"`
// 	Time     int64 `json:"Time"`
// 	I010     I010  `json:"I010"`
// 	I000     I000  `json:"I000"`
// 	I020     I020  `json:"I020"`
// 	I041     I041  `json:"I041"`
// 	I048     I048  `json:"I048"`
// 	I049     I049  `json:"I049"`
// 	I050     *I050 `json:"I050,omitempty"`
// 	I051     *I051 `json:"I051,omitempty"`
// 	I052     *I052 `json:"I052,omitempty"`
// 	I040     I040  `json:"I040"`
// }

// type I010 struct {
// 	SAC int64 `json:"SAC"`
// 	SIC int64 `json:"SIC"`
// }

// type I000 struct {
// 	TYP int64 `json:"TYP"`
// }

// type I020 struct {
// 	MsgIndex int64 `json:"MSG_INDEX"`
// }

// type I041 struct {
// 	StartAz float64 `json:"START_AZ"`
// 	EndAz   float64 `json:"END_AZ"`
// 	StartRg int64   `json:"START_RG"`
// 	CellDur int64   `json:"CELL_DUR"`
// }

// type I048 struct {
// 	Res int64 `json:"RES"`
// }

// type I049 struct {
// 	Nbvb    int64 `json:"NB_VB"`
// 	NbCells int64 `json:"NB_CELLS"`
// }

// type I050 struct {
// 	Video string `json:"VIDEO,omitempty"`
// }

// type I051 struct {
// 	Video string `json:"VIDEO,omitempty"`
// }

// type I052 struct {
// 	Video string `json:"VIDEO,omitempty"`
// }

// type I040 struct {
// 	ToD float64 `json:"ToD"`
// }